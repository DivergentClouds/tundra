==========
= Tundra =
==========


Macros
======

Overview
--------
tundra-extra.inc includes tundra-core.inc along with some macros and constants.
for information on constants defined in tundra-extra.inc, see constants.txt.
the signature of a macro contains additional information on what may be passed
to it. 'src' marks a register that may be dereferenced, 'dest' marks a register
that may not be dereferenced, and 'imm' marks a 16-bit immediate. note that
'src' may not be '*pc' and 'dest' may not be 'pc'. registers marked 'dest' may
be modified by the macro.

MMIO Macros
-----------
  ; halts execution
  HALT

Bitwise Macros
--------------
  ; set dest to ~dest
  NOT dest

  ; set dest to dest | src
  OR dest, src

  ; set dest to dest | imm
  ORI dest, imm

  ; rotate dest to the left by imm
  ; imm must be positive
  ROTLI dest, imm

  ; rotate dest to the right by imm
  ; imm must be positive
  ROTRI dest, imm

Arithmetic Macros
-----------------
  ; set dest to the two's complement negation of dest
  NEG dest

  ; subtract src from dest
  SUB dest, src

  ; subtract imm from dest
  SUBI dest, imm

Jump Macros
-----------
all jump macros respect the result of CMP.

  ; set PC to src
  JMP src

  ; set PC to imm
  JMPI imm

  ; jump to src2 if dest and src1 are equal
  JEQ dest, src1, src2

  ; jump to imm if dest and src are equal
  JEQRI dest, src, imm

  ; jump to src if dest and imm are equal
  JEQIR dest, imm, src

  ; jump to imm2 if imm1 and src are equal
  JEQI dest, imm1, imm2

  ; jump to src2 if dest and src1 are not equal
  JNE dest, src1, src2

  ; jump to imm if dest and src are not equal
  JNERI, dest, src, imm

  ; jump to imm2 if dest and imm1 are not equal
  JNEI, dest, imm1, imm2

  ; jump to src2 if dest and src1 are equal
  ; asserts that dest and src1 are non-negative
  JEQP dest, src1, src2

  ; jump to imm if dest and src are equal
  ; asserts that dest and src are non-negative
  JEQPRI dest, src, imm

  ; jump to src if dest and imm are equal
  ; asserts that dest and imm are non-negative
  JEQPIR dest, imm, src

  ; jump to imm2 if dest and imm1 are equal
  ; asserts that dest and imm1 are non-negative
  JEQPI dest, imm1, imm2

  ; jump to src2 if dest <= src1 (unsigned)
  JLEQU dest, src1, src2

  ; jump to imm if dest <= src (unsigned)
  JLEQURI dest, src, imm

  ; jump to imm2 if dest <= imm1 (unsigned)
  JLEQUI dest, imm1, imm2

  ; jump to src2 if dest > src1 (unsigned)
  JGTU dest, src1, src2

  ; jump to imm if dest > src (unsigned)
  JGTURI dest, src, imm

  ; jump to imm2 if dest > imm1 (unsigned)
  JGTUI dest, imm1, imm2

Stack Macros
------------
STACK_INIT must be called before any stack or function macros.

  ; set C to STACK_BASE
  ; reserves C as the stack pointer
  ; enables the alias SP for C
  STACK_INIT

  ; push src to the stack
  PUSH src

  ; push imm to the stack
  PUSHI imm

  ; push src to the stack, as a byte
  ; asserts that the upper byte of src is 0
  PUSHB src

  ; push imm to the stack
  ; asserts that the upper byte of imm is 0
  PUSHBI imm
  
  ; pop a word from the stack into dest
  POP dest

  ; pop a byte from the stack into dest
  POPB dest

  ; remove the top src bytes of the stack
  DROP src

  ; remove the top imm bytes of the stack
  DROPI imm

  ; copy a value that is src bytes deep in the stack to dest
  PEEK dest, src

  ; copy a value that is imm bytes deep in the stack to dest
  PEEKI dest, imm

  ; set a value that is src1 bytes deep in the stack to src2
  POKE src1, src2

  ; set a value that is src bytes deep in the stack to imm
  POKERI src, imm

  ; set a value that is imm bytes deep in the stack to src
  POKEIR imm, src

  ; set a value that is imm1 bytes deep in the stack to imm2
  POKEI imm1, imm2

Function Macros
---------------
all function macros respect the result of CMP. STACK_INIT must be called
before any stack or function macros.

  ; push the next address to the stack and jump to src
  CALL src
  
  ; push the next address to the stack and jump to imm
  CALLI src

  ; call imm if dest and src are equal
  CEQRI dest, src, imm

  ; call imm2 if dest and imm1 are not equal
  CNEI dest, imm1, imm2

  ; call imm if dest and src are not equal
  CNERI dest, src, imm

  ; call imm2 if dest and imm1 are equal
  CEQI dest, imm1, imm2

  ; call imm if dest and src are equal
  ; asserts that dest and src are non-negative
  CEQPRI dest, src, imm

  ; call imm2 if dest and imm1 are equal
  ; asserts dest and src are non-negative
  CEQPI dest, imm1, imm2

  ; pop a word of the stack into PC
  POPJ

  ; pop a word into dest before dropping src bytes from the stack followed by
  ; jumping to dest
  RET dest, src

  ; pop a word into dest before dropping imm bytes from the stack followed by
  ; jumping to dest
  RETI dest, imm


